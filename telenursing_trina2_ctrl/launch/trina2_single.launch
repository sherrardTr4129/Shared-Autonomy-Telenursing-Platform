<launch>

    <!-- Arguments -->
    <!-- Robot name -->
    <arg name="robot_name" default="trina2"/>
    <arg name="prefix" default="$(arg robot_name)/"/>
    <arg name="right_prefix" default="$(arg prefix)right_arm_" />
    <arg name="left_prefix" default="$(arg prefix)left_arm_" />
    <!-- Arm and gripper type -->
    <arg name="arm" default="gen3"/>
    <!-- Number of degrees of freedom of the arm -->
    <arg name="dof" default="7"/> 
    <!-- True if the arm has a Vision module -->
    <arg name="vision" default="true"/> 
    <arg name="gripper" default="robotiq_2f_85" />

    <!-- Gazebo parameters -->
    <arg name="cyclic_data_publish_rate" default="30"/> <!--Hz-->
    

    <!-- Initial position in Gazebo -->
    <arg name="x0" default="1"/>
    <arg name="y0" default="-1"/>
    <arg name="z0" default="0"/>
    <arg name="yaw" default="1.57" />

    <!-- Load the description for the robot -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder 
        $(find trina2_description)/robots/urdf/trina2.xacro 
            arm:=$(arg arm) dof:=$(arg dof) 
            vision:=$(arg vision) gripper:=$(arg gripper)
            robot_name:=$(arg robot_name) prefix:=$(arg prefix)
            right_prefix:=$(arg right_prefix) 
            left_prefix:=$(arg left_prefix)
            sim:=true"/>

    <!-- Spawn the robot in Gazebo -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" 
        output="screen" args="-urdf -param robot_description 
            -model $(arg robot_name) 
            -robot_namespace $(arg robot_name)
            
            -x $(arg x0) 
            -y $(arg y0) 
            -z $(arg z0) 
            -Y $(arg yaw)

            -J $(arg right_prefix)joint_1 -2.8
            -J $(arg right_prefix)joint_2 1.57
            -J $(arg right_prefix)joint_3 0.0
            -J $(arg right_prefix)joint_4 1.15
            -J $(arg right_prefix)joint_5 0.2
            -J $(arg right_prefix)joint_6 1.95
            -J $(arg right_prefix)joint_7 -3.05

            -J $(arg left_prefix)joint_1 -2.1
            -J $(arg left_prefix)joint_2 1.57
            -J $(arg left_prefix)joint_3 1.57
            -J $(arg left_prefix)joint_4 1.57
            -J $(arg left_prefix)joint_5 0
            -J $(arg left_prefix)joint_6 0
            -J $(arg left_prefix)joint_7 1.57"/> 

    <!-- Load controller configuration files from trina2_control package -->
    <!-- Joint controller -->
    <rosparam file="$(find trina2_control)/config/arms/dual_arm_joint_position_controllers.yaml"
        subst_value="true" command="load" />
    <!-- Gripper controller -->
    <rosparam file="$(find trina2_control)/config/grippers/dual_arm_gripper_action_controller_parameters.yaml"
        subst_value="true" command="load" />
    <!-- Mobile base controller -->
    <rosparam file="$(find trina2_control)/config/base/mobile_base_controller.yaml" 
        subst_value="true" command="load" />
    <!-- Camera controller -->
    <rosparam file="$(find trina2_control)/config/camera/main_camera_controller.yaml" 
        subst_value="true" command="load" />

    <!-- Start the arm trajectory controllers -->
    <node name="$(arg arm)_trajectory_controller_spawner" pkg="controller_manager" type="spawner" 
        respawn="false" output="screen" args=" 
            right_arm_$(arg arm)_joint_trajectory_controller 
            left_arm_$(arg arm)_joint_trajectory_controller" />

    <!-- Start the arm position controllers -->
    <node name="$(arg arm)_position_controllers_spawner" pkg="controller_manager" type="spawner" 
        respawn="false" output="screen" args=" --stopped
            right_arm_joint_1_position_controller
            right_arm_joint_2_position_controller
            right_arm_joint_3_position_controller
            right_arm_joint_4_position_controller
            right_arm_joint_5_position_controller
            right_arm_joint_6_position_controller
            right_arm_joint_7_position_controller
            
            left_arm_joint_1_position_controller
            left_arm_joint_2_position_controller
            left_arm_joint_3_position_controller
            left_arm_joint_4_position_controller
            left_arm_joint_5_position_controller
            left_arm_joint_6_position_controller
            left_arm_joint_7_position_controller"/>

    <!-- Start gripper controllers -->
    <node name="$(arg gripper)_controllers_spawner" pkg="controller_manager" type="spawner" 
        respawn="false" output="screen" args="
            right_arm_$(arg gripper)_gripper_controller
            left_arm_$(arg gripper)_gripper_controller"/>

    <!-- Start base and camera controllers -->
    <node name="other_controllers_spawner" pkg="controller_manager" type="spawner" 
        respawn="false" output="screen" args="
            joint_state_controller 
            base_controller
            main_cam_pitch_controller
            main_cam_yaw_controller"/>

    <!-- Control Interface -->
    <!-- Start camera control interface -->
    <node name="main_camera_interface" pkg="trina2_control" type="main_camera_control_interface"
    respawn="false" output="screen">
    </node>

    <!-- Start MoveIt main executable -->
    <include file="$(find trina2_moveit_config)/launch/move_group.launch">
        <arg name="publish_monitored_planning_scene" value="true" />
        <arg name="prefix" value="$(arg prefix)"/>
        <arg name="right_prefix" value="$(arg right_prefix)" />
        <arg name="left_prefix" value="$(arg left_prefix)" />
    </include> 

    <!-- Home the robot -->
    <node name="gui_to_base_control" pkg="telenursing_trina2_ctrl" type="gui_to_base_control.py" output="screen" respawn="false"/>
    <node name="gui_to_arm_control" pkg="telenursing_trina2_ctrl" type="gui_to_arm_control.py" output="screen" respawn="false"/>
    <node name="control_right_arm" pkg="telenursing_trina2_ctrl" type="control_right_arm.py" output="screen" respawn="false"/>
 
    <!-- TODO Driver is needed when a real Kinova robot is used-->
    <?ignore
    <!-- Start simulated Kortex Driver -->
    <!--launch-prefix="gdb -ex run args"-->
    <node name="$(arg robot_name)_$(arg right_prefix)_driver" pkg="kortex_driver" type="kortex_arm_driver" output="screen">
        <param name="sim" value="true"/>
        <param name="cyclic_data_publish_rate" value="$(arg cyclic_data_publish_rate)"/>
        <param name="arm" value="$(arg arm)"/>
        <param name="gripper" value="$(arg gripper)"/>
        <param name="dof" value="$(arg dof)"/>
        <param name="robot_name" value="$(arg robot_name)"/>
        <param name="prefix" value="$(arg right_prefix)"/>
        <rosparam command="load" file="$(find trina2_description)/arms/config/right_joint_limits.yaml" subst_value="true"/>
        <rosparam command="load" file="$(find trina2_description)/arms/config/right_twist_limits.yaml" subst_value="true"/>
        <rosparam command="load" file="$(find trina2_description)/grippers/config/right_joint_limits.yaml" subst_value="true"/>
    </node>
    
    <node name="$(arg left_prefix)_driver" pkg="kortex_driver" type="kortex_arm_driver" output="screen">
        <param name="sim" value="true"/>
        <param name="cyclic_data_publish_rate" value="$(arg cyclic_data_publish_rate)"/>
        <param name="arm" value="$(arg arm)"/>
        <param name="gripper" value="$(arg gripper)"/>
        <param name="dof" value="$(arg dof)"/>
        <param name="robot_name" value="$(arg robot_name)"/>
        <param name="prefix" value="$(arg left_prefix)"/>
        <rosparam command="load" file="$(find trina2_description)/arms/config/left_joint_limits.yaml" subst_value="true"/>
        <rosparam command="load" file="$(find trina2_description)/arms/config/left_twist_limits.yaml" subst_value="true"/>
        <rosparam command="load" file="$(find trina2_description)/grippers/config/left_joint_limits.yaml" subst_value="true"/>
    </node>
    ?>
    
    <!-- Start robot state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen" />

    <!-- Navigation package -->
    <include file="$(find trina2_navigation)/launch/trina2_amcl.launch">
        <arg name="prefix" value="$(arg prefix)"/>
    </include>


    

</launch>
