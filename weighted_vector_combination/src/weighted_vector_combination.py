#!/usr/bin/env python

# Author: Trevor Sherrard
# Course: Motion Planning (RBE550)
# Since: 04/14/2020
# Purpose: This script subscribes to the generated information entropy pose
#          and adds the constribution of the computed saliency vector as a weighted 
#          offset. 

import rospy
import message_filters
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Vector3Stamped

# declare vector weight. This value will be used
# to scale the saliency vector.
SAL_VECTOR_WEIGHT = 0.5

# declare topic names
information_entropy_pose_topic = "entropy"
saliency_max_vector_topic = "/saliency_move_vec"
movePoseTopic = "/info_and_saliency_avg_pose"

# set up Pose publisher for newly computed Pose
posePub = rospy.Publisher(movePoseTopic, PoseStamped)

def combined_callback(info_pose, sal_vec):
    """
    This callback adds the saliency vector as an offset to the 
    pose generated by the information entropy maximization node.
    This new pose is then republished.

    params:
        info_pose -> (PoseStamped msg): pose from information entrop maximization node
        sal_vec -> (Vector3Stamped msg): vector computed by the saliency maximization node

    returns:
        None
    """

    # create new pose
    new_pose = PoseStamped()
    new_pose.header.stamp = rospy.Time.now()

    # add scaled vector to information entropy pose
    new_pose.pose.position.x = info_pose.pose.position.x + (sal_vec.vector.x * SAL_VECTOR_WEIGHT)
    new_pose.pose.position.y = info_pose.pose.position.y + (sal_vec.vector.y * SAL_VECTOR_WEIGHT)
    new_pose.pose.position.z = info_pose.pose.position.z + (sal_vec.vector.z * SAL_VECTOR_WEIGHT)

    # retain old orientation
    new_pose.pose.orientation.x = info_pose.pose.orientation.x
    new_pose.pose.orientation.y = info_pose.pose.orientation.y
    new_pose.pose.orientation.z = info_pose.pose.orientation.z
    new_pose.pose.orientation.w = info_pose.pose.orientation.w

    # republish new pose
    posePub.publish(new_pose)

def main():
    rospy.init_node("weighted_vector_combination_node")
    rospy.loginfo("weighted_vector_combination_node started!")

    # create subscribers
    info_pose_sub = message_filters.Subscriber(information_entropy_pose_topic, PoseStamped)
    sal_vector_sub = message_filters.Subscriber(saliency_max_vector_topic, Vector3Stamped)

    # try to sync both topics
    approxSync = message_filters.ApproximateTimeSynchronizer([info_pose_sub, sal_vector_sub], queue_size=10, slop=0.3)
    approxSync.registerCallback(combined_callback)
    rospy.spin()

if(__name__ == "__main__"):
    main()
